<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>

    <!--    <parent>-->
    <!--        <groupId>org.springframework.boot</groupId>-->
    <!--        <artifactId>spring-boot-starter-parent</artifactId>-->
    <!--        <version>2.4.4</version>-->
    <!--        <relativePath/> &lt;!&ndash; lookup parent from repository &ndash;&gt;-->
    <!--    </parent>-->
    <groupId>org.zchzh</groupId>
    <artifactId>demo-test-all</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>demo-test-all</name>

    <description>Simple java tool usage(no spring boot)</description>

    <modules>
        <module>nio-netty</module>
        <module>java-demo</module>
        <module>common-util</module>
        <module>examples</module>
        <module>zookeeper</module>
        <module>excel</module>
        <module>word</module>
        <module>grpc</module>
        <module>bloom-filter</module>
        <module>rocketmq</module>
        <module>system-info</module>
        <module>nacos</module>
        <module>mapstruct</module>
        <module>java-agent</module>
        <module>java-atomic</module>
        <module>redis</module>
        <module>java-future</module>
        <module>jsonwebtoken</module>
        <module>disruptor</module>
    </modules>

    <properties>
        <java.version>1.8</java.version>
        <netty.version>4.1.51.Final</netty.version>
        <cglib.version>3.1</cglib.version>
        <hessian.version>4.0.63</hessian.version>
        <kryo.version>4.0.2</kryo.version>
        <fastjson.version>1.2.73</fastjson.version>
        <nacos.version>1.3.0</nacos.version>
        <zk.version>4.0.0</zk.version>
        <zkclient.version>0.10</zkclient.version>
        <hutool.version>5.4.5</hutool.version>
        <spi.auto.service.version>1.0-rc4</spi.auto.service.version>
        <oshi.version>3.9.1</oshi.version>
        <easypoi.version>4.3.0</easypoi.version>
        <poi-tl.version>1.10.0</poi-tl.version>
        <grpc.version>1.39.0</grpc.version>
        <protobuf.version>3.17.3</protobuf.version>
        <mapstruct.version>1.4.2.Final</mapstruct.version>
        <redisson.version>3.13.0</redisson.version>
        <lombok.version>1.18.16</lombok.version>
        <jwt.version>0.11.2</jwt.version>
        <disruptor.version>3.4.2</disruptor.version>
    </properties>

    <dependencyManagement>
        <dependencies>

            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.18.18</version>
            </dependency>

            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <!-- 无需指定版本是因为指定了 spring-boot-dependencies 的版本，而该版本指定了 slf4j 的版本 -->
                <version>1.7.30</version>
            </dependency>

            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool.version}</version>
            </dependency>

            <dependency>
                <groupId>cglib</groupId>
                <artifactId>cglib</artifactId>
                <version>${cglib.version}</version>
            </dependency>

            <dependency>
                <groupId>io.netty</groupId>
                <artifactId>netty-all</artifactId>
                <version>${netty.version}</version>
            </dependency>


            <!--        序列化方式-->
            <!-- hessian -->
            <dependency>
                <groupId>com.caucho</groupId>
                <artifactId>hessian</artifactId>
                <version>${hessian.version}</version>
            </dependency>

            <!-- kryo -->
            <dependency>
                <groupId>com.esotericsoftware</groupId>
                <artifactId>kryo</artifactId>
                <version>${kryo.version}</version>
            </dependency>

            <!--        fastjson-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>


            <!--            discovery-->

            <dependency>
                <groupId>com.alibaba.nacos</groupId>
                <artifactId>nacos-client</artifactId>
                <version>${nacos.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-recipes</artifactId>
                <version>${zk.version}</version>
            </dependency>

            <dependency>
                <groupId>com.101tec</groupId>
                <artifactId>zkclient</artifactId>
                <version>${zkclient.version}</version>
            </dependency>

            <!--            bloomfilter-->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>29.0-jre</version>
            </dependency>

            <!--        bloom filter java 支持，使用前必须在redis中安装RedisBloom模块-->
            <dependency>
                <groupId>com.redislabs</groupId>
                <artifactId>jrebloom</artifactId>
                <version>2.0.0</version>
            </dependency>

            <dependency>
                <groupId>com.github.oshi</groupId>
                <artifactId>oshi-core</artifactId>
                <version>${oshi.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.rocketmq</groupId>
                <artifactId>rocketmq-client</artifactId>
                <version>4.7.1</version>
            </dependency>

            <!--导入导出的工具包,可以完成Excel导出,导入,Word的导出,Excel的导出功能-->
            <dependency>
                <groupId>cn.afterturn</groupId>
                <artifactId>easypoi-base</artifactId>
                <version>${easypoi.version}</version>
            </dependency>
            <!--耦合了spring-mvc 基于AbstractView,极大的简化spring-mvc下的导出功能-->
            <dependency>
                <groupId>cn.afterturn</groupId>
                <artifactId>easypoi-web</artifactId>
                <version>${easypoi.version}</version>
            </dependency>
            <!--基础注解包,作用与实体对象上,拆分后方便maven多工程的依赖管理-->
            <dependency>
                <groupId>cn.afterturn</groupId>
                <artifactId>easypoi-annotation</artifactId>
                <version>${easypoi.version}</version>
            </dependency>

            <dependency>
                <groupId>com.deepoove</groupId>
                <artifactId>poi-tl</artifactId>
                <version>${poi-tl.version}</version>
            </dependency>

            <dependency>
                <groupId>io.grpc</groupId>
                <artifactId>grpc-netty-shaded</artifactId>
                <version>${grpc.version}</version>
            </dependency>

            <dependency>
                <groupId>io.grpc</groupId>
                <artifactId>grpc-protobuf</artifactId>
                <version>${grpc.version}</version>
            </dependency>

            <dependency>
                <groupId>io.grpc</groupId>
                <artifactId>grpc-stub</artifactId>
                <version>${grpc.version}</version>
            </dependency>


            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct</artifactId>
                <version>${mapstruct.version}</version>
            </dependency>

            <dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson</artifactId>
                <version>${redisson.version}</version>
            </dependency>

            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-api</artifactId>
                <version>${jwt.version}</version>
            </dependency>
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-impl</artifactId>
                <version>${jwt.version}</version>
            </dependency>
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-jackson</artifactId> <!-- or jjwt-gson if Gson is preferred -->
                <version>${jwt.version}</version>
            </dependency>

            <dependency>
                <groupId>com.lmax</groupId>
                <artifactId>disruptor</artifactId>
                <version>${disruptor.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>


</project>
